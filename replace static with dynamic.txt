To replace the static data with dynamic data, you can use JavaScript or a JavaScript framework such as React or Angular. In this example, I'll show you how to replace the static data using plain JavaScript.

First, remove the static data from the HTML file, leaving only the table structure. You can also remove the static data from the Dashboard section.

Next, add the following sample data in a JavaScript file (e.g., data.js):

javascript
Copy code
const patients = [
  { id: 1, name: "John Doe", age: 32, gender: "Male" },
  { id: 2, name: "Jane Smith", age: 28, gender: "Female" },
];

const doctors = [
  { id: 1, name: "Dr. Alice Johnson", specialization: "Cardiologist", contact: "(555) 123-4567" },
  { id: 2, name: "Dr. Bob Brown", specialization: "Neurologist", contact: "(555) 234-5678" },
  { id: 3, name: "Dr. Carol Williams", specialization: "Orthopedic Surgeon", contact: "(555) 345-6789" },
];

const appointments = [
  { id: 1, patientId: 1, doctorId: 1, date: "2023-04-01", time: "10:00 AM" },
  { id: 2, patientId: 2, doctorId: 2, date: "2023-04-01", time: "11:00 AM" },
  { id: 3, patientId: 1, doctorId: 3, date: "2023-04-02", time: "9:00 AM" },
  { id: 4, patientId: 2, doctorId: 1, date: "2023-04-02", time: "2:00 PM" },
];
Then, in another JavaScript file (e.g., main.js), create functions to populate the tables and update the Dashboard data. In the same file, invoke these functions after the DOM content is loaded:

javascript
Copy code
document.addEventListener("DOMContentLoaded", function () {
  populatePatientTable();
  populateDoctorTable();
  populateAppointmentTable();
  updateDashboardStats();
});

function populatePatientTable() {
  const patientTableBody = document.querySelector("#patientList tbody");

  patients.forEach((patient) => {
    const row = document.createElement("tr");

    Object.values(patient).forEach((value) => {
      const cell = document.createElement("td");
      cell.textContent = value;
      row.appendChild(cell);
    });

    const actionsCell = document.createElement("td");
    const editButton = document.createElement("button");
    editButton.textContent = "Edit";
    actionsCell.appendChild(editButton);

    const deleteButton = document.createElement("button");
    deleteButton.textContent = "Delete";
    actionsCell.appendChild(deleteButton);

    row.appendChild(actionsCell);
    patientTableBody.appendChild(row);
  });
}

function populateDoctorTable() {
  const doctorTableBody = document.querySelector("#doctorList tbody");

  doctors.forEach((doctor) => {
    const row = document.createElement("tr");

    Object.values(doctor).forEach((value) => {
      const cell = document.createElement("td");
      cell.textContent = value;
      row.appendChild(cell);
    });

    const actionsCell = document.createElement("td");
    const editButton = document.createElement("button");
    editButton.textContent = "Edit";
    actionsCell.appendChild(editButton);

    const deleteButton = document.createElement("button");
    deleteButton.textContent = "Delete";
    actionsCell.appendChild(deleteButton);

    row.appendChild



saaaf iub
finish the code 
Apologies for the truncation. Here's the rest of the main.js code:

javascript
Copy code
    row.appendChild(actionsCell);
    doctorTableBody.appendChild(row);
  });
}

function populateAppointmentTable() {
  const appointmentTableBody = document.querySelector("#appointmentList tbody");

  appointments.forEach((appointment) => {
    const row = document.createElement("tr");

    const patient = patients.find((p) => p.id === appointment.patientId);
    const doctor = doctors.find((d) => d.id === appointment.doctorId);

    [patient.name, doctor.name, appointment.date, appointment.time].forEach((value) => {
      const cell = document.createElement("td");
      cell.textContent = value;
      row.appendChild(cell);
    });

    const actionsCell = document.createElement("td");
    const editButton = document.createElement("button");
    editButton.textContent = "Edit";
    actionsCell.appendChild(editButton);

    const deleteButton = document.createElement("button");
    deleteButton.textContent = "Delete";
    actionsCell.appendChild(deleteButton);

    row.appendChild(actionsCell);
    appointmentTableBody.appendChild(row);
  });
}

function updateDashboardStats() {
  document.querySelector("#numPatients").textContent = patients.length;
  document.querySelector("#numDoctors").textContent = doctors.length;
  document.querySelector("#numAppointments").textContent = appointments.length;
}
Finally, add the following lines to your HTML file to include the JavaScript files:

html
Copy code
<script src="data.js"></script>
<script src="main.js"></script>
This will dynamically populate the Patients, Doctors, and Appointments tables and update the Dashboard data using the sample data provided in the data.js file. This example uses plain JavaScript, but you can achieve similar results with other JavaScript frameworks, such as React or Angular.